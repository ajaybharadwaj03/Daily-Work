/**
 * Definition for a binary tree node.
 * public class TreeNode {
 *     int val;
 *     TreeNode left;
 *     TreeNode right;
 *     TreeNode() {}
 *     TreeNode(int val) { this.val = val; }
 *     TreeNode(int val, TreeNode left, TreeNode right) {
 *         this.val = val;
 *         this.left = left;
 *         this.right = right;
 *     }
 * }
 */
class Solution {
    public boolean isCousins(TreeNode root, int x, int y) {
        List<List<Integer>> lst = new ArrayList<>();
        Queue<TreeNode> q = new LinkedList<>();
        if(root == null){return false;}
        boolean cousin = false;
        q.add(root);
        while(!q.isEmpty()){
            int s = q.size();
            ArrayList<Integer> ar = new ArrayList<>();
            for(int i=1;i<=s;i++){
                TreeNode curr = q.poll();
                ar.add(curr.val);
                if(curr.left!=null && curr.right!=null){
                    if((curr.left.val==x && curr.right.val == y)||curr.left.val==y && curr.right.val==x){
                        return false;
                    }
                }
                if(curr.left!=null){
                    q.add(curr.left);
                }
                if(curr.right!=null){
                    q.add(curr.right);
                }
            }
            if(ar.contains(x)&&ar.contains(y)){
                cousin = true;
            }
        }
        return cousin;
    }
}