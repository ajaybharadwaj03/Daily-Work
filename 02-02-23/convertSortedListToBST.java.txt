/**
 * Definition for singly-linked list.
 * public class ListNode {
 *     int val;
 *     ListNode next;
 *     ListNode() {}
 *     ListNode(int val) { this.val = val; }
 *     ListNode(int val, ListNode next) { this.val = val; this.next = next; }
 * }
 */
/**
 * Definition for a binary tree node.
 * public class TreeNode {
 *     int val;
 *     TreeNode left;
 *     TreeNode right;
 *     TreeNode() {}
 *     TreeNode(int val) { this.val = val; }
 *     TreeNode(int val, TreeNode left, TreeNode right) {
 *         this.val = val;
 *         this.left = left;
 *         this.right = right;
 *     }
 * }
 */
class Solution {
    ArrayList<Integer> ar= new ArrayList<>();
    public TreeNode sortedListToBST(ListNode head) {
        if(head==null){return null;}
        findNodes(head);
        TreeNode curr = createTree(0,ar.size()-1);
        return curr;
    }
    public TreeNode createTree(int si, int ei){
        if(si>ei){return null;}
        int mid = (si+ei)/2;
        TreeNode root = new TreeNode(ar.get(mid));
        root.left = createTree(si,mid-1);
        root.right = createTree(mid+1,ei);
        return root;
    }
    public void findNodes(ListNode head){
        if(head==null){return ;}
        while(head!=null){
            ar.add(head.val);
            head = head.next;
        }
        return;
    }
}