/**
 * Definition for a binary tree node.
 * public class TreeNode {
 *     int val;
 *     TreeNode left;
 *     TreeNode right;
 *     TreeNode() {}
 *     TreeNode(int val) { this.val = val; }
 *     TreeNode(int val, TreeNode left, TreeNode right) {
 *         this.val = val;
 *         this.left = left;
 *         this.right = right;
 *     }
 * }
 */
class Solution {
    ArrayList<Integer> lst = new ArrayList<Integer>();
    HashMap<Integer,Integer> map = new HashMap<Integer,Integer>();
    
    public int[] findMode(TreeNode root) {
        if(root==null){
            int[] n = new int[0];
            return n;
        }
        inorder(root);
        int maxi = Collections.max(map.values());
        for(Map.Entry<Integer,Integer> i:map.entrySet()){
            if(i.getValue()==maxi){
                lst.add(i.getKey());
            }
        }
        int[] res = new int[lst.size()];
        for(int j=0;j<lst.size();j++){
            res[j] = lst.get(j);
        }
        return res;
    }
    public void inorder(TreeNode root){
        if(root==null){return ;}
        inorder(root.left);
        if(map.containsKey(root.val)){
            map.put(root.val,map.get(root.val)+1);
        }
        else{
            map.put(root.val,1);
        }
        inorder(root.right);
    }  
}